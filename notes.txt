// "Line 1\nLine 2\r\nBetween\r\nLine 3"

// "Line 1"
// "Line 2\r"

// "Between\r"

// "Line 3" will be left as a partial message

// in total, we have 2 commands, and a partial command


std::string Server::readUserInput(pollfd& connectionInfo)
{
	const int SIZE = 4;
	int		readData, total = 0;
	char    buffer[SIZE];
	std::string result;
	
	
	// set recv on non blocking mode
	while (true)
	{
		readData = recv(connectionInfo.fd, buffer, SIZE - 1, 0);
		if (readData < 0)
		{
			return (std::cerr << "Error : Failed to receive data from a socket descriptor!\n"
				<< strerror(errno)
				<< std::endl, result);
		}
		if (!readData)
			break ;
			
		result.append(buffer, readData);
		total += readData;
		memset(buffer,'\0', SIZE);

		if (readData < SIZE)
			break ;
	}

	std::cout << "READ: " << total << " " << result << std::endl;
	printAscis(result);

	return (result);
}












/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

bool takesParam(int c)
{
	return (c == 'k' || c == 'o' || c == 'l');
}

std::vector<std::string> split(std::string& input, char delimiter)
{
	std::vector<std::string> result;
	std::stringstream ss(input);
	std::string temp;

	while (std::getline(ss, temp, delimiter))
	{
		result.push_back(temp);
		temp.clear();
	}
	return (result);
}

typedef struct s_mode
{
	char mode;
	bool add;
	std::string param;
}	Mode;

void transform(std::vector<std::string>& args)
{
	std::vector<Mode> result;

	bool takesb;
	
	for (size_t index = 0; index < args.size(); )
	{
	    if (args[index][0] != '+' && args[index][0] != '-')
	    {
	        index++;
	        continue ;
	    }
		if (args[index].size() == 2)
		{
			Mode mode;

			mode.mode = args[index][1];
			mode.add = args[index][0] == '+';
			
			if (takesParam(args[index][1]))
			{
				if (index + 1 >= args.size())
					return ;
				if (args[index + 1].find_first_of(',') != std::string::npos)
				    return ;
				mode.param = args[index + 1];
				index++;
			}
			result.push_back(mode);
		}

		
		else if (args[index].size() > 2)
		{
			std::vector<std::string> moreArgs;
			int takes = 0;
			bool skip = true;
            
            // no args passed
			if (index + 1 < args.size() && (args[index + 1][0] != '+' || args[index + 1][0] != '-'))
			{
			    std::cout << "No args" << std::endl;
			    moreArgs = split(args[index + 1], ',');
			    skip = false;
			}
			for (size_t j = 1; j < args[index].size(); j++)
			{
			    if (takesParam(args[index][j]))
			        takes++;
			}
			
			if (takes > moreArgs.size() || moreArgs.size() > takes)
			{
			    return ;
			}

            // for each char in that string
			for (size_t j = 1, temp = 0; j < args[index].size(); j++)
			{
				Mode riz;

				riz.mode = args[index][j];
				riz.add = args[index][0] == '+';
				
				if (takesParam(args[index][j]))
					riz.param = moreArgs[temp++];
				
				result.push_back(riz);
			}
			if (skip)
			    index++;
			index++;
		}
	}
	
	for (size_t index = 0; index < result.size(); index++)
	{
	    std::cout << "Mode: " << result[index].mode
	        << "\nAdd: " << result[index].add
	        << "\nParam: " << result[index].param << std::endl;
	}
}

int main()
{
    
    std::vector<std::string> test;
    
    test.push_back("+k");
    
    //test.push_back("+ko");
    test.push_back("pass");
    
    transform(test);
    
    cout<<"Hello World";

    return 0;
}